<div class="why-subscribe-popup">
  <button type="button" class="why-subscribe-btn">
    <svg clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" width="22" height="22" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="m12.002 2.005c5.518 0 9.998 4.48 9.998 9.997 0 5.518-4.48 9.998-9.998 9.998-5.517 0-9.997-4.48-9.997-9.998 0-5.517 4.48-9.997 9.997-9.997zm0 1.5c-4.69 0-8.497 3.807-8.497 8.497s3.807 8.498 8.497 8.498 8.498-3.808 8.498-8.498-3.808-8.497-8.498-8.497zm0 6.5c-.414 0-.75.336-.75.75v5.5c0 .414.336.75.75.75s.75-.336.75-.75v-5.5c0-.414-.336-.75-.75-.75zm-.002-3c.552 0 1 .448 1 1s-.448 1-1 1-1-.448-1-1 .448-1 1-1z" fill-rule="nonzero"/></svg>
    <p>Why Subscribe?</p>
  </button>
  <div class="modal-background"></div>
  <div class="modal">
    <div style="display: flex; width: 100%; justify-content: space-between;">
      <h5>Why Subscribe?</h5>
      <div class="close__btn hide__desktop">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M16 1.4L14.6 0L8 6.6L1.4 0L0 1.4L6.6 8L0 14.6L1.4 16L8 9.4L14.6 16L16 14.6L9.4 8L16 1.4Z" fill="black"/>
        </svg>
      </div>
    </div>
    <ul>
      <li>Renews at the frequency you selected</li>
      <li>No suprises, we'll remind you before each renewal</li>
      <li>Cancel anytime! No catch.</li>
    </ul>
  </div>
</div>

<style>
  .why-subscribe-popup {
    position: relative;
    display: inline-block;
  }
  .why-subscribe-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
    border: none;
    box-shadow: none;
    outline: none;
    color: black;
    cursor: pointer;
    padding: 0 0 0 8px;
  }
  .why-subscribe-btn__icon {
    display: flex;
    align-items: center;
  }
  .why-subscribe-btn p {
    margin-left: 10px;
    font-weight: 500;
    border-bottom: 1px solid black;
  }
  .why-subscribe-popup .modal {
    left: calc(-362px + 85px);
    top: 200%;
    position: absolute;
    background-color: white;
    z-index: 1000;
    padding: 24px;
    display: none;
    height: fit-content;
    width: 362px;
    max-width: 362px;
    box-shadow: 0 3px 6px rgb(0 0 0 / 16%), 0 3px 6px rgb(0 0 0 / 23%);
    border-radius: 6px;
  }
  .why-subscribe-popup .modal.active {
    display: initial;
  }
  .why-subscribe-popup .modal h5 {
    margin: 0 0 20px;
    display: inline-block;
    letter-spacing: 1.26px;
    font-size: 16px;
    font-weight: 700;
    color: #333;
  }
  .why-subscribe-popup .modal ul {
    padding: 0;
    margin: 0;
    display: inline-block;
  }
  .why-subscribe-popup .modal ul li {
    display: flex;
    align-items: center;
    margin-bottom: 14px;
  }
  .why-subscribe-popup .modal ul li:last-of-type {
    margin: 0;
  }
  .why-subscribe-popup .modal ul li {
    color: #333;
    font-size: 16px;
    line-height: 1.5;
    font-weight: 400;
    font-family: Poppins, sans-serif;
    display: flex;
    align-items: flex-start;
    gap: 1em;
  }
  .why-subscribe-popup .modal ul li:before {
    content: "\2022";
    color: #000;
    font-weight: 700;
    display: inline-block;
    height: 100%;
    padding: 0;
    font-size: 22px;
    top: -5px;
    position: relative;
  }
  .rc-template__radio-group .rc-radio-group__options {
    overflow: visible !important;
  }
  .model-background {
    display: none;
  }
  .hide__desktop {
    display: none;
  }
  @media screen and (max-width: 768px) {
    .why-subscribe-popup {
      position: initial;
    }
    .why-subscribe-btn p {
      font-size: 14px;
      line-height: 28px;
    }
    .why-subscribe-popup .modal {
      left: 50%;
      top: 50%;
      position: fixed;
      transform: translate(-50%, -50%);
      width: 90%;
    }
    .why-subscribe-popup .modal-background.active {
      position: fixed;
      left: 0;
      top: 0;
      height: 100%;
      width: 100%;
      z-index: 100;
      display: flex;
      opacity: 0.4;
      background: black;
    }
    .why-subscribe-popup .modal {
      overflow-y: scroll;
    }
    .hide__desktop {
      display: initial;
    }
  }
</style>

<script>
  var modalContainer = document.querySelector('.why-subscribe-popup');
  var modalToggle = document.querySelector('.why-subscribe-popup button');
  var modalBackground = document.querySelector('.why-subscribe-popup .modal-background');
  var modal = document.querySelector('.why-subscribe-popup .modal');
  var closeBtn = document.querySelector('.why-subscribe-popup .close__btn');

  modalContainer
    .addEventListener('mouseenter', function() {
      modal.classList.add('active');
      modalBackground.classList.add('active');
    })

    modalContainer
    .addEventListener('mouseleave', function() {
      modal.classList.remove('active');
      modalBackground.classList.remove('active');
    })

    modalBackground
    .addEventListener('click', function() {
      if (modal.classList.contains('active')) {
        modal.classList.remove('active');
        modalBackground.classList.remove('active');
      }
    })

    closeBtn
    .addEventListener('click', function() {
      if (modal.classList.contains('active')) {
        modal.classList.remove('active');
        modalBackground.classList.remove('active');
      }
    })

  modalToggle
  .addEventListener('click', function() {
    if (modal.classList.contains('active')) {
      modal.classList.remove('active');
      modalBackground.classList.remove('active');
    } else {
      modal.classList.add('active');
      modalBackground.classList.add('active');
    }
  })
</script>

<script>
  window.addEventListener('load', event => {
    const new_target = document.querySelector('body');

// Create a new observer instance:
    const observer = new MutationObserver(function() {
      if (document.querySelector('.rc-selling-plans')) {
        console.log("The new div was just appended!");

        var rc_template = document.querySelector('.rc-option__subsave');
        var recharge_more_info = document.querySelector('.why-subscribe-popup');

        rc_template.append(recharge_more_info)

        observer.disconnect();
      }
    });

// Set configuration object:
    const config = {
      childList: true
    };

// Start the observer
    observer.observe(new_target, config);

// Create the mutation we are listening out for
    setTimeout(() => {
      const div = document.createElement('div');
      div.id = 'new-div';
      document.body.append(div);
    }, 3000);
  })
</script>>>>>